import * as React from "react"
import { Card, CardContent } from "@/components/ui/card"
import ReactMarkdown from 'react-markdown'
import type { Components } from 'react-markdown'
import remarkGfm from 'remark-gfm'
import {
  Bot,
  Loader2,
  RefreshCw,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { BriefingApiResponse } from "@/lib/fetchers/briefing"
import { useQuery, useQueryClient } from "@tanstack/react-query"
import axios from "axios"

interface AiSummaryTabProps {
  briefing: BriefingApiResponse;
}

const markdownComponents: Components = {
  p: ({ node, ...props }) => (
    <p className="mt-4 first:mt-0 text-sm text-muted-foreground" {...props} />
  ),
  h3: ({ node, ...props }) => (
    <h3 className="text-sm font-medium text-foreground mt-6 first:mt-0" {...props} />
  ),
  ul: ({ node, ...props }) => (
    <ul className="list-disc pl-4" {...props} />
  ),
  li: ({ node, ...props }) => (
    <li className="mt-1" {...props} />
  ),
  strong: ({ node, ...props }) => (
    <strong className="text-foreground" {...props} />
  ),
  em: ({ node, ...props }) => (
    <em className="text-muted-foreground" {...props} />
  ),
};

// Create an axios instance with custom config
const api = axios.create({
  timeout: 60000, // 60 second timeout
  headers: {
    'Content-Type': 'application/json',
  },
});

// Function to fetch AI summary
const fetchAiSummary = async (briefing: BriefingApiResponse) => {
  const { data } = await api.post('/api/weather_summary', briefing);
  return data.summary;
};

export function AiSummaryTab({ briefing }: AiSummaryTabProps) {
  const queryClient = useQueryClient();

  const { data: aiSummary, isLoading, error, refetch } = useQuery({
    queryKey: ['aiSummary', briefing],
    queryFn: () => fetchAiSummary(briefing),
    staleTime: 5 * 60 * 1000, // Consider data fresh for 5 minutes
    retry: 1, // Only retry once on failure
    enabled: !!briefing, // Only run query if briefing data exists
  });

  return (
    <div className="space-y-4">
      <Card className="bg-gradient-to-br from-blue-500/5 via-background to-background border-blue-500/20">
        <CardContent className="p-4">
          <div className="flex flex-col h-[500px]">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-sm font-semibold flex items-center text-blue-700 dark:text-blue-400">
                <Bot className="h-4 w-4 mr-1.5"/> AI Weather Analysis
              </h3>
              {!isLoading && (
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={() => refetch()}
                  className="h-8 px-2 text-blue-700 dark:text-blue-400"
                >
                  <RefreshCw className="h-4 w-4 mr-1.5"/> Regenerate
                </Button>
              )}
            </div>
            
            <div className="flex-1 overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-blue-500/20 scrollbar-track-transparent">
              <div className="prose prose-sm dark:prose-invert max-w-none">
                {isLoading ? (
                  <div className="flex items-center justify-center h-[200px] text-muted-foreground">
                    <Loader2 className="h-4 w-4 mr-2 animate-spin"/>
                    Analyzing weather data...
                  </div>
                ) : error ? (
                  <div className="flex flex-col items-center justify-center h-[200px] text-destructive space-y-2">
                    <p className="text-sm">{(error as Error).message || 'Failed to fetch AI summary'}</p>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => refetch()}
                      className="mt-2"
                    >
                      Try Again
                    </Button>
                  </div>
                ) : aiSummary ? (
                  <ReactMarkdown 
                    remarkPlugins={[remarkGfm]}
                    components={markdownComponents}
                  >
                    {aiSummary}
                  </ReactMarkdown>
                ) : (
                  <p className="text-sm text-muted-foreground text-center py-8">
                    No analysis available.
                  </p>
                )}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="border-amber-500/20">
        <CardContent className="p-4 text-xs text-muted-foreground">
          <p className="flex items-center">
            <Bot className="h-3 w-3 mr-1.5 text-amber-500"/> 
            This analysis is generated by AI and should be used as a supplementary tool only. 
            Always verify with official weather sources and exercise proper pilot judgment.
          </p>
        </CardContent>
      </Card>
    </div>
  );
} 